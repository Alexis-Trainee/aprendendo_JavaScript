var numeros = [20, 6, 3, 8];
undefined
numeros
(4) [20, 6, 3, 8]
numeros.map (function minusTwo (n) {
    return n-2;});
(4) [18, 4, 1, 6]
function addTwo (valor) {
    return valor *2;
}
undefined
addTwo (9)
18
var myNumbers = [20, 6, 3, 8];
undefined
myNumbers.map (function addTwo (valor) {
    return valor *2;});
(4) [40, 12, 6, 16]
myNumbers.forEach
ƒ forEach() { [native code] }
myNumbers.forEach (function addTwo (valor) {
    return valor *2;});
    
    
    filter:
    const numeros = [2, 3, 6, 5, 10];
undefined
numeros
(5) [2, 3, 6, 5, 10]
let multiplosDe2 = [];
undefined
for (let i = 0; i< numeros.length; i++) {
    if (numeros[i] % 2===0) {
        multiplosDe2.push (numeros[i])
    }
}
3
multiplosDe2
(3) [2, 6, 10]
const numerosFiltrados = numeros.filter(function (numero) {
    if (numero % 2 ===0) {
        return true;
    }else {
        return false;
    }
})
undefined
console.log ('numerosFiltrados',numerosFiltrados);
VM3376:1 numerosFiltrados (3) [2, 6, 10]
undefined
console.log (numerosFiltrados);
VM3440:1 (3) [2, 6, 10]

Reduce:
const numeros = [2, 3, 6, 5, 10];
undefined
numeros
(5) [2, 3, 6, 5, 10]
var x = [];
undefined
for (i=0; i<numeros.length; i++) {
if (numeros[i] % 2 ===0) {x.push (numeros [i])
                         }
}
3
x
(3) [2, 6, 10]
const somaReduce = numeros.reduce(function (valorAcumulador, valorDoArray) {
    return valorAcumulador + valorDoArray;},0)
undefined
console.log (somaReduce)
retornará: 26

EX2:
const pessoas = [
    {
        nome: 'Ayrton',
        idade: 27,
    },
    
    { 
        nome: 'João',
        idade: 14,
    },
    
    {
        nome: 'Maria',
        idade: 23,
    },
    
    {
        nome: 'Joana',
        idade: 21,
    },
    
    {
        nome: 'Lucas',
        idade: 32,
    },
    
    {
        nome: 'mateus',
        idade: 15,
    },
    
    {
        nome: 'Isa',
        idade: 23,
    },
    
    {
        nome: 'Luisa',
        idade: 17,
    }
    ];
    
    No final retornar um objeto  um com a chave maiores de idade e a outra menores de idade.
    const pessoasAgrupadas = pessoas.reduce (function(valorAcumulador, valorArray) {
    const propMaiorOuMenor = valorArray.idade>=18 ? 'maiores' : 'menores';
    
    valorAcumulador [propMaiorOuMenor].push(valorArray);
    return valorAcumulador;
}, {maiores:[], menores:[]})
console.log (pessoasAgrupadas);
retornará: {maiores: Array(5), menores: Array(3)}

meu exemplo:
const carros = [
    {
        nome: 'Gol',
        motor: 1.0,
    },
    
    {
        nome: 'Uno',
        motor: 1.4,
    },
    
    {
        nome: 'Cobalt',
        motor: 1.4,
    },
    
    {
        nome: 'Celta',
        motor: 1.0,
    },
    
    {
        nome: 'Strada',
        motor: 1.4,
    },
    
    {
        nome: 'Voyage',
        motor: 1.0,
    }
    ];
    const grupoDeCarros = carros.reduce(function (valorAcumulador, valorArray) {
    const propMotorPotencia = valorArray.motor >= 1.4 ? 'maiorPotencia' : 'menorPotencia';
    
    valorAcumulador [propMotorPotencia].push(valorArray);
    
    return valorAcumulador;
}, { maiorPotencia: [], menorPotencia: []})
console.log (grupoDeCarros);
{maiorPotencia: Array(3), menorPotencia: Array(3)}


-------------------------------------------------------início---------------------------------------------------------------------
O array é números
const mapEFilter = numeros.filter( numero => numero % 2===0).map(numero=> numero*2);
undefined
console.log (mapEFilter);
VM9608:1 (3) [4, 8, 12]


function soma (numero) {
   return numero + 2;
}
undefined
soma(8);
10
const numeros = [1, 2, 3, 4, 5];
undefined
numeros
(5) [1, 2, 3, 4, 5]
numeros.length;
5
numeros.map(function divide (numero)) {
VM7588:1 Uncaught SyntaxError: Unexpected token ')'
numeros.map(soma);
(5) [3, 4, 5, 6, 7]
numeros.map(function divisao) {
VM7745:1 Uncaught SyntaxError: Unexpected token ')'
numeros.map (function (divisao)){
VM7884:1 Uncaught SyntaxError: Unexpected token ')'
numeros.push[8];
undefined
numeros
(5) [1, 2, 3, 4, 5]
numeros.push(6);
6
numeros
(6) [1, 2, 3, 4, 5, 6]
numeros.map(divide(numero){
VM8127:1 Uncaught SyntaxError: missing ) after argument list
numeros.map (function dividir (numero){
    return numero/2;})
(6) [0.5, 1, 1.5, 2, 2.5, 3]
var grupo = [];
undefined
numeros.filter (let i =0; i< numeros.length; i++){
VM8541:1 Uncaught SyntaxError: missing ) after argument list
for (let i =0; i< numeros.length; i++){
    numeros[i] % 2===0) {
VM8646:2 Uncaught SyntaxError: Unexpected token ')'
for (let i =0; i< numeros.length; i++){
    if (numeros[i] % 2===0) {
        grupo.push (numeros[i]);
    }
}
3
console.log (grupo);
VM8840:1 (3) [2, 4, 6]
undefined
const grupamento = numeros.filter (function multiplos2 (numero) {
    return numero % 2 === 0})
undefined
console.log (grupamento);
VM9172:1 (3) [2, 4, 6]
undefined
const mapEFilter = numeros.filter( numero => numero % 2===0).map(numero=> numero*2);
undefined
console.log (mapEFilter);
VM9608:1 (3) [4, 8, 12]
--------------------------------------------------------------fim------------------------------------------------------------------
PAR ÍMPAR
const numeros = [1, 2, 3, 4, 5];
undefined
const parImpar = numeros.reduce (function (valorAcumulador, valorArray) {
    var conjuntoParImpar = valorArray % 2 ===0 ? 'pares' : 'impares';
    valorAcumulador[conjuntoParImpar].push (valorArray);
    return valorAcumulador;
},{pares:[], impares: []})
undefined
console.log (parImpar);
VM10450:1 {pares: Array(2), impares: Array(3)}

-----------------------------------------------FUNCTION-------------------------------------------------------------------------

